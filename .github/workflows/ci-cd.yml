name: CI/CD Pipeline

on:
  push:
    branches: [ main, deploy-to-render ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_ecom
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up test environment variables
      run: |
        echo "DATABASE_URL=postgresql://test_user:test_pass@localhost:5432/test_ecom" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-github-actions-only" >> $GITHUB_ENV
        echo "ALGORITHM=HS256" >> $GITHUB_ENV
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> $GITHUB_ENV
        echo "STRIPE_PUBLISHABLE_KEY=pk_test_fake_key_for_testing" >> $GITHUB_ENV
        echo "STRIPE_SECRET_KEY=sk_test_fake_key_for_testing" >> $GITHUB_ENV
        echo "STRIPE_WEBHOOK_SECRET=whsec_fake_secret_for_testing" >> $GITHUB_ENV
        echo "ADMIN_EMAIL=admin@test.com" >> $GITHUB_ENV
        echo "ADMIN_PASSWORD=test_admin_password" >> $GITHUB_ENV
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
        echo "DEBUG=true" >> $GITHUB_ENV
        
    - name: Run database migrations
      run: |
        # Create tables using our init script
        python -c "
        from app.db.init_db import create_tables, init_db
        from app.db.base import SessionLocal
        create_tables()
        db = SessionLocal()
        try:
            init_db(db)
        finally:
            db.close()
        print('Database initialized for testing')
        "
        
    - name: Run tests
      run: |
        # Run pytest if tests exist, otherwise run basic import test
        if [ -f "pytest.ini" ] || [ -d "tests" ]; then
          pytest -v
        else
          echo "Running basic import test..."
          python -c "
          from app.main import app
          from app.models import User, Product, Category, Cart, Order
          print('‚úÖ All imports successful')
          print('‚úÖ App created successfully')
          "
        fi
        
    - name: Run basic API tests
      run: |
        # Start the app in background for API testing
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        APP_PID=$!
        sleep 10
        
        # Basic health check
        curl -f http://localhost:8000/ || exit 1
        echo "‚úÖ Health check passed"
        
        # Test registration
        curl -X POST http://localhost:8000/api/v1/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","username":"testuser","password":"test123","full_name":"Test User"}' \
          || exit 1
        echo "‚úÖ Registration test passed"
        
        # Test login
        curl -X POST http://localhost:8000/api/v1/auth/login \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","password":"test123"}' \
          || exit 1
        echo "‚úÖ Login test passed"
        
        # Stop the app
        kill $APP_PID

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy-to-render' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        echo "üöÄ Deployment triggered to Render"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        # Render auto-deploys when deploy-to-render branch is pushed
        # This step is mainly for logging and could trigger additional actions
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment completed successfully"
        else
          echo "‚ùå Deployment failed"
        fi

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt
        
    - name: Run Bandit security scan
      run: |
        pip install bandit[toml]
        bandit -r app/ -f json -o bandit-report.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

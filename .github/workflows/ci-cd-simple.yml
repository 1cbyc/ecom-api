name: Simple CI/CD Pipeline

on:
  push:
    branches: [ main, deploy-to-render ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Test basic imports
      run: |
        python -c "
        import os
        # Set minimal required env vars
        os.environ['SECRET_KEY'] = 'test-key-for-ci-only'
        os.environ['STRIPE_PUBLISHABLE_KEY'] = 'pk_test_fake'
        os.environ['STRIPE_SECRET_KEY'] = 'sk_test_fake'
        os.environ['STRIPE_WEBHOOK_SECRET'] = 'whsec_fake'
        os.environ['ADMIN_EMAIL'] = 'admin@test.com'
        os.environ['ADMIN_PASSWORD'] = 'test_password'
        os.environ['ENVIRONMENT'] = 'testing'
        
        # Test imports without database connection
        try:
            from app.core.config import settings
            print(f'‚úÖ Config: {settings.PROJECT_NAME}')
            
            from app.models.user import User
            print('‚úÖ User model imported')
            
            from app.schemas.user import UserCreate
            print('‚úÖ User schema imported')
            
            from app.api.v1.endpoints import auth
            print('‚úÖ Auth endpoint imported')
            
            print('üéâ All basic imports successful!')
        except Exception as e:
            print(f'‚ùå Import failed: {e}')
            exit(1)
        "

    - name: Validate API structure
      run: |
        python -c "
        import os
        os.environ['SECRET_KEY'] = 'test-key-for-ci-only'
        os.environ['STRIPE_PUBLISHABLE_KEY'] = 'pk_test_fake'
        os.environ['STRIPE_SECRET_KEY'] = 'sk_test_fake'
        os.environ['STRIPE_WEBHOOK_SECRET'] = 'whsec_fake'
        os.environ['ADMIN_EMAIL'] = 'admin@test.com'
        os.environ['ADMIN_PASSWORD'] = 'test_password'
        os.environ['ENVIRONMENT'] = 'testing'
        
        try:
            from app.main import app
            print(f'‚úÖ FastAPI app created: {app.title}')
            
            # Check if we have the expected routes
            routes = [route.path for route in app.routes]
            expected_routes = ['/api/v1/auth/login', '/api/v1/products/', '/api/v1/cart/']
            
            for route in expected_routes:
                if any(route in r for r in routes):
                    print(f'‚úÖ Route found: {route}')
                else:
                    print(f'‚ö†Ô∏è Route not found: {route}')
            
            print('üéâ API structure validation complete!')
        except Exception as e:
            print(f'‚ùå API validation failed: {e}')
            exit(1)
        "

  basic-security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        pip install bandit safety
        
    - name: Run basic security check
      run: |
        echo "Running basic security scan..."
        bandit -r app/ -ll --format txt || echo "Bandit completed with warnings"
        
    - name: Check for common vulnerabilities
      run: |
        echo "Checking for known vulnerabilities..."
        safety check || echo "Safety check completed with warnings"

  deploy:
    needs: [test, basic-security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy-to-render' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Render
      run: |
        echo "üöÄ Deploying to Render..."
        echo "‚úÖ Branch: ${{ github.ref }}"
        echo "‚úÖ Commit: ${{ github.sha }}"
        echo "‚úÖ Timestamp: $(date)"
        echo "üéâ Render will auto-deploy from this push!"
        
    - name: Verify deployment
      run: |
        echo "üåê API should be live at: https://ecom-api-s8lz.onrender.com"
        echo "üìö Docs available at: https://ecom-api-s8lz.onrender.com/docs"
        echo "üîó Custom domain: https://ecomapi.nsisong.com"
